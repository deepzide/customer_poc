name: Deploy to server

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:
    inputs: {}
    secrets:
      DOCKER_USER:
        required: true
      DOCKER_TOKEN:
        required: true
      SSH_KEY_PRIVATE:
        required: true

env:
  SERVER_IP: 46.62.156.99
  CUSTOM_APP_NAME: custom_app # Nombre de tu carpeta con la app custom

jobs:
  build:
    runs-on: self # Se ejecuta en tu Self-Hosted Runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH access
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY_PRIVATE }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Encode apps.json
        id: encode
        run: |
          # Solo codifica el apps.json base (ERPNext/HRMS)
          export APPS_JSON_BASE64=$(base64 -w 0 apps.json)
          echo "APPS_JSON_BASE64=$APPS_JSON_BASE64" >> $GITHUB_ENV

      - name: Clone frappe_docker
        run: git clone https://github.com/frappe/frappe_docker

      - name: Inject custom app installation into Containerfile
        run: |
          set -euo pipefail
          CFG_FILE="./frappe_docker/images/layered/Containerfile"
          APP_NAME="${{ env.CUSTOM_APP_NAME }}"

          # Create a temporary file with the injection block (literal, no shell interpolation)
          cat > /tmp/injection_block <<'INJECTION'
# ----------------------------------------------------------------------
# [CAPA CORTA - INYECCIÃ“N CUSTOM]
# Esta capa rompe el cache si el contenido de ./custom_app cambia.
# ----------------------------------------------------------------------
COPY --chown=frappe:frappe ./$APP_NAME /home/frappe/frappe-bench/apps/$APP_NAME

USER frappe
WORKDIR /home/frappe/frappe-bench
RUN bench install-app $APP_NAME --skip-assets --skip-dev-checks --resolve-deps
INJECTION

          # Insert the injection block BEFORE the line that cleans .git directories.
          # We use awk to make the multiline insertion robust.
          awk -v block="$(cat /tmp/injection_block)" '
            BEGIN { inserted=0 }
            /find apps -mindepth 1 -path .*\/.*\.git/ && !inserted { print block; inserted=1 }
            { print }
          ' "$CFG_FILE" > "${CFG_FILE}.tmp" && mv "${CFG_FILE}.tmp" "$CFG_FILE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push custom ERPNext image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frappe_docker/images/layered/Containerfile
          push: true
          tags: ${{ secrets.DOCKER_USER }}/deepzide:latest
          build-args: |
            FRAPPE_PATH=https://github.com/frappe/frappe
            FRAPPE_BRANCH=version-15
            APPS_JSON_BASE64=${{ env.APPS_JSON_BASE64 }}
          cache-from: |
            type=gha
            type=registry,ref=${{ secrets.DOCKER_USER }}/deepzide:latest
          cache-to: type=gha,mode=max

  ansible:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh

          # Decode base64 key and save it
          echo "${{ secrets.SSH_KEY_PRIVATE }}" | base64 --decode > ~/.ssh/erpnext_deploy_key
          chmod 600 ~/.ssh/erpnext_deploy_key

          # Add known host to avoid prompt
          ssh-keyscan -H ${{ env.SERVER_IP }} >> ~/.ssh/known_hosts 2>/dev/null

          # Test SSH connection
          echo "Testing SSH connection..."
          ssh -i ~/.ssh/erpnext_deploy_key -o StrictHostKeyChecking=no root@${{ env.SERVER_IP }} "echo 'SSH connection successful!'"

      - name: Create dynamic inventory
        run: |
          SSH_KEY_PATH="${HOME}/.ssh/erpnext_deploy_key"

          cat > ./ansible/inventory.ini <<EOF
[erpnext]
${{ env.SERVER_IP }} ansible_user=root ansible_ssh_private_key_file=${SSH_KEY_PATH}
EOF

          echo "=== Generated Inventory ==="
          cat ./ansible/inventory.ini

      - name: Test Ansible connection
        run: |
          ansible all -i ./ansible/inventory.ini -m ping

      - name: Deploy docker-compose via Ansible
        run: |
          ansible-playbook -i ./ansible/inventory.ini ./ansible/docker_erpnext.yml -v
